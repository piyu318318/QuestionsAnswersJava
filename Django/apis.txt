##################################################################################

install Django using command -> pip install django
create folder -> DjangoRestFramework
go to folder -> cd DjangoRestFramework
start project using command ->django-admin startproject myproject
now go to project folder myproject  and create api app folder
create API folders using command -> python manage.py startapp myproject_apis

##################################################################################
Now  in settings.py add in  ALLOWED_HOSTS = [] below line check
ALLOWED_HOSTS = ["*"]
Explain -In Django allows the application to accept requests from any host, effectively permitting all domains to access the application. This is typically used in development but should be restricted to specific domains in production for security reasons
##################################################################################
then install below all libraries
pip install djangorestframework
pip install markdown       # Markdown support for the browsable API.
pip install django-filter  # Filtering support


##################################################################################
INSTALLED_APPS = The INSTALLED_APPS setting in Django is a list of all the applications that are enabled in your Django project. Each entry in the list represents an app that Django will
recognize and make available for use in the project.
After installing libraries then add a command to the settings.py
INSTALLED_APPS = [
    ................,
    ................,
    ................,
    'rest_framework',  # Django Rest Framework (third-party app)
    'myproject'             # Your custom app for the projec
]
##################################################################################
copy myproject/urls.py
create myproject_apis/urls.py and paste whole code whatever is copied from myproject/urls.py
urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('myproject_api.urls'))
]
now in the myproject/urls.py add the -> path('', include('myproject_api.urls')) in the urlpatterns
The path('', include('myproject_api.urls')) statement in the main project's urls.py file is used to include and route the URL patterns defined in the myproject_apis app

##################################################################################

In Django, models are Python classes that represent the structure and behavior of the data in your application. They define the database schema for your project and serve as an abstraction
layer for database operations. Django uses these models to create database tables and manage data in an Object-Relational Mapping (ORM) fashion.
for example i have ceated tables when i migrate it will create tables automatically

class Users(models.Model):
    userId = models.AutoField
    userName = models.CharField(max_length = 50)
    email = models.CharField(max_length = 50)
    password  = models.CharField(max_length = 50)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)




After execute commands
python manage.py migrate - Applies the migrations to the database, synchronizing the database schema with the Django models.
python manage.py makemigrations -  Creates new migration files based on the changes detected in your Django models.
##################################################################################
how to implement apis
in the myproject_apis/urls.py add the url path and import the views.py in it 
for exmaple read this 

from django.contrib import admin
from django.urls import path
from . import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('Register/', views.RegisterUser.as_view(), name="home")

]

now to to views.py import the View class from django.views and create class named RegisterUser 
for example 

from django.shortcuts import render, HttpResponse
from django.views import View
# Create your views here.
class RegisterUser(View):  #inherit the views

    def get(self, request): #get represet that get apis and 
        return HttpResponse("This is the registration page!")

    def post(self): #get represet that post
        return HttpResponse("testing piyush")


##################################################################################

