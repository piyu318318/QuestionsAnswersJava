bash are mostly used for 
1.monitoring tools
2.enhansed security (supports encrypt and decrypt)
3.task automations


Bash scripts are files containing commands that you run in the terminal. They automate tasks and make your work more efficient.
bash script does not supports oops 



To create a script, start with the shebang #! followed by the path to Bash, usually /bin/bash. Make sure your script has execute permissions.
#!/bin/bash
#you can comment using hashtag in bash file 
echo "hello world"



*Using Variables in Scripts
variable sare used to store a value in bash 
Variables in Bash are used to store data that can be used and manipulated throughout your script or command-line session. Bash variables are untyped, meaning they can hold any type of data.


#!/bin/bash
name = "piyush"
echo "heelo $name"


!/bin/bash
name = "piyush"
age = 12
echo "my name is $name and my age is $age"


*Environment variables in bash script 
Environment variables are special variables that affect the way processes run on your system. They are often used to store system-wide values like the location of executables or the default editor.

!/bin/bash
echo "environment variables are $PATH"




*local variables  vs global variables in bash 
local variables score is in the withi the block of code means in the function you cannot ue out side of a function
global variables are used outside of the function as well.

!/bin/bash
name = "madhav"  #global variable
function() {
name = "piyush"#local variable
echo "name is $name"
}
echo "my name is $name" #will porint global variable 

*concatenation of variables 
firstname = "piyush"
lastname = "dixit"
echo "$firstname$lastname"



*addition of variabels 
num1 = 10
num2 = 10
echo $(num1 + num2)

*data types in bash script 
1.strings are sequence of characters
name = "piyush"

2.numbers in bash are used for the arithmatic operations.
num1 = 100
num2 = 200

sum=$((num1 + num2))
difference=$((num2 - num1))
product=$((num1 * num2))
quotient=$((num2 / num1))



3.Arrays are used to store multiple values in a single variable. Each element in an array is accessed using an index. You can iterate over arrays and modify elements.
fruits = ("apple","banana","mango")
for fruit in "{$fruits[@]}";do
echo fruit
done

4.Associative Arrays An associative array (or hash map) lets you use string keys instead of just numeric indexes (like normal arrays).

declare -A my_array  
my_array["name"]="Piyush"
my_array["role"]="Admin"
my_array["location"]="India"

echo "${my_array["name"]}" 

4.Bash does not support floating-point arithmetic natively. For such operations, consider using external tools like bc or awk.



**************operators in bash script 

*comparison operators 

equal to -> -eq
not equal to -> -ne
less than -> -lt
less than or equal to -> -le
greater tahn -> -gt
greater than equal to -> -ge


string comparison operators
=: Equal to
!=: Not equal to
<: Less than, in ASCII alphabetical order
>: Greater than, in ASCII alphabetical order


arithmatic operators 
addition -> +
subtraction -> -
division -> /
modulos -> 5
multiplication -> *

Logical operators 
and &&
or ||
not !


File test operators 
-e checks file exists or not
-d chheck directory exists or not
-r checks the file is reguler or not 
-s checks file is not empty



**** if statement 
If statements allow you to execute code based on a condition. If the condition is true, the code block will run.
The condition is enclosed in square brackets [ ] and the statement ends with fi, which is if spelled backward, marking the end of the if block.


#if statememnt 
num = 15
if [ num -gt 10 ];then
echo "Number is greater than 10"
fi


#if else loop
If...else statements provide a way to execute one block of code if a condition is true and another block if it is false.
The else keyword introduces the alternative block, and the statement ends with fi.

num = 6
if [ num -gt 10]; then
  echo "number is greater than 10"
else
  echok "number is less than 10"



Using Loops in Bash
for loop in bash script 
For loops allow you to iterate over a list of items or a range of numbers. They are useful for repeating tasks a specific number of times.
The for keyword is followed by a variable name, a range of values, and a do keyword, which marks the start of the loop block.

for i in {1..5} ;do
  echo "iteration $i"
done



while loop 
They are useful for tasks that need to repeat until a certain condition changes.
The condition is enclosed in square brackets [ ], and the loop ends with done.
count = 1
while [ $count -le 1 ];do
  echo "$count is count"
  ((count++))
done


Until loop 
How until works
while runs while the condition is true.
until runs until the condition is true (i.e., it runs while the condition is false).


number  = 0

until [ $count is -gt 5]
do
  echo "$count is count"
  ((count++))
done


break statement 
Stops the entire loop immediately.
Control jumps to the next command after the loop.


#!/bin/bash
for i in {1..10};do
  if [$i -eq 3];then
      break
  fi
echo $i



Continue  statement

#!/bin/bash
for i in {1..10};do
  if [$i -eq 5];then
    continue
  else
    echo "$i"
    

***functions in bash script 
There are two valid ways to define a function in Bash:

#type 1

function myfunction()
{
echo "hii"
}


#type 2
myfunction()
{
echo "hi"
}


caling a function 
myfunction  #just call a function









